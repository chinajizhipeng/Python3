算法是独立存在的一种解决问题的思想。

算法的五个特性：输入、输出、有穷性、确定性、可行性
时间复杂度：到底经历了多少个步骤计算。
大O表示法：把时间复杂度的细节忽略掉
最优时间复杂度、最坏时间复杂度、平均时间复杂度
基本操作、顺序结构加法、循环结构乘法、分支结构最大值
计算时间复杂度的函数不能进行函数调用

代码执行时间测量：
timeit模块
from timeit import Timer

def test1():
    li = []
    for i in range(10000):
        li.append(i)

timer1 = Timer("test1()","from __main__ import test1") #从当前文件导入test1函数
print("+:"timer1.timeit(1000)) #测算1000次

用extend 不用加
list内置函数的时间复杂度
sort() O(nlonn) 
dict内置函数的时间复杂度
程序 = 数据结构+算法
数据结构是静态的描述了数据元素之间的关系
算法是为了解决实际问题而设计的，数据结构是算法需要处理的问题载体

抽象数据类型：把数据类型和数据类型上的运算捆在一起，进行封装。ADT
常用的数据运算类型：插入、删除、修改、查找、排序
顺序表：一个顺序表的完整信息包括两部分，一部分是表中的元素结合，另一部分是为实现正确
操作而需要记录的信息。
一体式结构，分离式结构。

不同的存储类型在内存中不同的存储单元，先变为二进制
一个字节占8位byte
整数型 一个数占4个字节
字符串 一个字符 占1个字节

顺序表，按顺序存放
int = [1,2,3] 
1,2,3的物理存储位置（字节）连起来了。
li指向了第一个存储位置。
li[2] 就是第一个存储位置+2*4Bytes 为第三个数，其实2就是偏移量

li =[12,'asdb',65] #存的是内存地址，每一个地址占4个字节

顺序表的结构
表头信息：容量：；元素个数 数据区
i = [12,3,4,5,6]
一开始数据就要多少空间，容量。
容量：一开始预估定义的空间
元素个数：现在有多少元素
数据区：
一体式顺序表，分离式顺序表。
数据区扩充不够时：
分离式添加顺序时i的存储地址不变，仅表头信息的指向发生变化。
一体式添加时，将它的数据区内存释放添加新的数据区
扩充数据区申请内存：加（固定），乘(加倍)内存
保序和非保序。元素变动时，其他元素顺序不变
list是动态顺序表（数据区可扩充），分离式顺序表，元素外置，倍增扩充，50000前4倍，之后1倍
链表的提出：不用扩展内存
单项循环列表：尾节点的指针指向头结点